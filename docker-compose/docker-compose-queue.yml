x-shared: &shared
  image: n8nio/n8n
  security_opt:
    - no-new-privileges:true
  dns:
    - ${DNS_SERVER:-8.8.8.8}
  restart: unless-stopped
  volumes:
    - /etc/localtime:/etc/localtime:ro
    - ./data:/home/node/.n8n
    - ./logs:/logs
  networks:
    - n8n
    - traefik
  environment:
    - TZ=${TIMEZONE:-UTC}
    - GENERIC_TIMEZONE=${TIMEZONE:-UTC}
    - N8N_PROTOCOL=https
    - N8N_HOST=${SUB}.${DOMAIN}
    - WEBHOOK_URL=https://api.${DOMAIN}
    - N8N_ENDPOINT_WEBHOOK=service
    - N8N_ENDPOINT_WEBHOOK_TEST=test
    - N8N_ENDPOINT_WEBHOOK_WAIT=wait
    - NODE_ENV=production
    - N8N_PAYLOAD_SIZE_MAX=500
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_HIRING_BANNER_ENABLED=false
    - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
    - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
    - N8N_MFA_ENABLED=false
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    - N8N_PROXY_HOPS=1
    - N8N_TEMPLATES_ENABLED=false
    - N8N_ONBOARDING_FLOW_DISABLED=true
    - N8N_RUNNERS_ENABLED=true
    # Database
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_DATABASE=${PG_DB}
    - DB_POSTGRESDB_HOST=${PG_HOST}
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_USER=${PG_USER}
    - DB_POSTGRESDB_PASSWORD=${PG_PASS}
    # SMTP
    - N8N_EMAIL_MODE=smtp
    - N8N_SMTP_HOST=${SMTP_HOST}
    - N8N_SMTP_PORT=${SMTP_PORT:-25}
    - N8N_SMTP_SSL=${SMTP_SSL:-false}
    - N8N_SMTP_SENDER=${SMTP_SENDER}
    # - N8N_SMTP_USER=${SMTP_USER}
    # - N8N_SMTP_PASS=${SMTP_PASS}
    # Logging
    - N8N_LOG_LEVEL=info
    - N8N_LOG_OUTPUT=console,file
    - N8N_LOG_FILE_LOCATION=/logs/n8n.log
    - N8N_LOG_FILE_MAXSIZE=5
    - N8N_LOG_FILE_MAXCOUNT=30
    # Data Retention
    - EXECUTIONS_DATA_PRUNE=true
    - EXECUTIONS_DATA_MAX_AGE=336 # in hours (14 days)
    # Queue Configuration
    - EXECUTIONS_MODE=queue
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - QUEUE_BULL_REDIS_HOST=n8nredis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=true
    - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
  env_file:
    - .env
  links:
    - n8nredis
  depends_on:
    n8nredis:
      condition: service_healthy
  healthcheck:
    test: ["CMD-SHELL", "/usr/bin/wget --server-response --proxy off --no-verbose --tries=1 --timeout=3 127.0.0.1:5678/healthz -O /dev/null 2>&1 | grep -q 'HTTP/1.1 200 OK'"]
    interval: 20s
    retries: 3

x-shared-webhook: &shared-webhook
  <<: *shared
  command: webhook
  labels:
    - "traefik.enable=true"
    - "traefik.docker.network=traefik"
    - "traefik.http.services.${SUB}-webhook.loadbalancer.server.port=5678"
    - "traefik.http.routers.${SUB}-webhook.entrypoints=https"
    - "traefik.http.routers.${SUB}-webhook.rule=Host(`api.${DOMAIN}`) && (PathPrefix(`/service`) || PathPrefix(`/wait`))"
    - "traefik.http.routers.${SUB}-webhook.tls=true"
    - "traefik.http.routers.${SUB}-webhook.service=${SUB}-webhook"
    - "traefik.http.routers.${SUB}-webhook.middlewares=default-headers@file"

x-shared-worker: &shared-worker
  <<: *shared
  command: worker
  depends_on:
    n8n-main:
      condition: service_healthy
    n8n-webhook1:
      condition: service_healthy
    n8n-webhook2:
      condition: service_started
    n8n-webhook3:
      condition: service_started
    n8n-webhook4:
      condition: service_started
    n8n-webhook5:
      condition: service_started
    n8n-webhook6:
      condition: service_started
    n8n-webhook7:
      condition: service_started

services:
  n8n-main:
    container_name: ${SUB}
    hostname: ${SUB}
    <<: *shared
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.services.${SUB}.loadbalancer.server.port=5678"
      - "traefik.http.routers.${SUB}.entrypoints=https"
      - "traefik.http.routers.${SUB}.rule=Host(`${SUB}.${DOMAIN}`)"
      - "traefik.http.routers.${SUB}.tls=true"
      - "traefik.http.routers.${SUB}.service=${SUB}"
      - "traefik.http.routers.${SUB}.middlewares=secured@file"
      # Webhooks Test
      - "traefik.http.routers.${SUB}-webhook-test.entrypoints=https"
      - "traefik.http.routers.${SUB}-webhook-test.rule=Host(`api.${DOMAIN}`) && PathPrefix(`/test`)"
      - "traefik.http.routers.${SUB}-webhook-test.tls=true"
      - "traefik.http.routers.${SUB}-webhook-test.service=${SUB}"
      - "traefik.http.routers.${SUB}-webhook-test.middlewares=default-headers@file"

  # Webhook Services
  n8n-webhook1:
    <<: *shared-webhook
    container_name: n8nWebhook1
    hostname: n8nWebhook1

  n8n-webhook2:
    <<: *shared-webhook
    container_name: n8nWebhook2
    hostname: n8nWebhook2

  n8n-webhook3:
    <<: *shared-webhook
    container_name: n8nWebhook3
    hostname: n8nWebhook3

  n8n-webhook4:
    <<: *shared-webhook
    container_name: n8nWebhook4
    hostname: n8nWebhook4

  n8n-webhook5:
    <<: *shared-webhook
    container_name: n8nWebhook5
    hostname: n8nWebhook5

  n8n-webhook6:
    <<: *shared-webhook
    container_name: n8nWebhook6
    hostname: n8nWebhook6

  n8n-webhook7:
    <<: *shared-webhook
    container_name: n8nWebhook7
    hostname: n8nWebhook7

  # Worker Services
  n8n-worker1:
    container_name: n8nWorker1
    hostname: n8nWorker1
    <<: *shared-worker

  n8n-worker2:
    container_name: n8nWorker2
    hostname: n8nWorker2
    <<: *shared-worker

  n8n-worker3:
    container_name: n8nWorker3
    hostname: n8nWorker3
    <<: *shared-worker

  n8n-worker4:
    container_name: n8nWorker4
    hostname: n8nWorker4
    <<: *shared-worker

  n8n-worker5:
    container_name: n8nWorker5
    hostname: n8nWorker5
    <<: *shared-worker

  n8n-worker6:
    container_name: n8nWorker6
    hostname: n8nWorker6
    <<: *shared-worker

  n8n-worker7:
    container_name: n8nWorker7
    hostname: n8nWorker7
    <<: *shared-worker

  # Redis for Queue Management
  n8nredis:
    image: docker.io/library/redis:alpine
    container_name: n8nRedis
    security_opt:
      - no-new-privileges:true
    hostname: n8nRedis
    command: --save 60 1 --loglevel warning
    restart: always
    networks:
      - n8n
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - n8nRedis:/data

  # Redis Management UI
  redisinsight:
    image: redis/redisinsight:latest
    container_name: RedisInsight
    security_opt:
      - no-new-privileges:true
    dns:
      - ${DNS_SERVER:-8.8.8.8}
    hostname: RedisInsight
    restart: unless-stopped
    networks:
      - traefik
      - n8n
    volumes:
      - ./redisinsight:/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.services.redisinsight.loadbalancer.server.port=5540"
      - "traefik.http.routers.redisinsight.entrypoints=https"
      - "traefik.http.routers.redisinsight.rule=Host(`redis.${DOMAIN}`)"
      - "traefik.http.routers.redisinsight.tls=true"
      - "traefik.http.routers.redisinsight.service=redisinsight"
      - "traefik.http.routers.redisinsight.middlewares=headers-authentik@file"
    depends_on:
      n8nredis:
        condition: service_healthy

volumes:
  n8nRedis:
    external: true

networks:
  n8n:
    external: true
  traefik:
    external: true
